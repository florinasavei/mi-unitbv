
#define _CRT_SECURE_NO_WARNINGS 1


 
 
 
 
 












#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>




#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>



#define YY_USE_PROTOS



#define YY_USE_CONST


 ! __cplusplus 

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST


 __STDC__ 

 ! __cplusplus 

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif



#define YY_NULL 0






#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)





#define BEGIN yy_start = 1 + 2 





#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START



#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0



#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state 

extern int yyleng;
extern FILE 

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2


















#define yyless(n) \
do \
{ \

 Undo effects of setting up yytext. 
	
	YY_RESTORE_YY_MORE_OFFSET \
	yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \

 set up yytext again 
} \
while (0)

#define unput(c) yyunput( c, yytext_ptr )





typedef unsigned int yy_size_t;


struct yy_buffer_state
{
	FILE 


 input buffer 

 current position in input buffer 


 Size of input buffer in bytes, not including room for EOB
	
	
	yy_size_t yy_buf_size;


 Number of characters read into yy_ch_buf, not including EOB
	
	
	int yy_n_chars;


 Whether we "own" the buffer - i.e., we know we created it,
	
	
	
	int yy_is_our_buffer;


 Whether this is an "interactive" input source; if so, and
	
	
	
	
	int yy_is_interactive;


 Whether we're considered to be at the beginning of a line.
	
	
	
	int yy_at_bol;


 Whether to try to fill the input buffer when we reach the
	
	
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1

 When an EOF's been seen but there's still some text to process
	
	
	
	
	
	
	
	
	
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;





#define YY_CURRENT_BUFFER yy_current_buffer




static char yy_hold_char;


 number of characters read into yy_ch_buf 


int yyleng;



static char 

 whether we need to initialize 

 start state number 




static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO((FILE 

void yy_switch_to_buffer YY_PROTO((YY_BUFFER_STATE new_buffer));
void yy_load_buffer_state YY_PROTO((void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO((FILE 
void yy_delete_buffer YY_PROTO((YY_BUFFER_STATE b));
void yy_init_buffer YY_PROTO((YY_BUFFER_STATE b, FILE 
void yy_flush_buffer YY_PROTO((YY_BUFFER_STATE b));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO((char 
YY_BUFFER_STATE yy_scan_string YY_PROTO((yyconst char 
YY_BUFFER_STATE yy_scan_bytes YY_PROTO((yyconst char 

static void 
static void 
static void yy_flex_free YY_PROTO((void 

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
{ \
if (!yy_current_buffer) \
	yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
}

#define yy_set_bol(at_bol) \
{ \
if (!yy_current_buffer) \
	yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
	yy_current_buffer->yy_at_bol = at_bol; \
}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE 
typedef int yy_state_type;
extern char 
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO((void));
static yy_state_type yy_try_NUL_trans YY_PROTO((yy_state_type current_state));
static int yy_get_next_buffer YY_PROTO((void));
static void yy_fatal_error YY_PROTO((yyconst char msg[]));




#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int)(yy_cp - yy_bp); \
	yy_hold_char = 
	
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 6
#define YY_END_OF_BUFFER 7
static yyconst short int yy_accept[22] =
{ 0,
0, 0, 7, 5, 5, 5, 3, 5, 0, 0,
3, 3, 2, 4, 3, 2, 2, 2, 1, 2,
0
};

static yyconst int yy_ec[256] =
{ 0,
1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 4, 1, 1, 1, 1, 5, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1
};

static yyconst int yy_meta[6] =
{ 0,
1, 1, 2, 1, 1
};

static yyconst short int yy_base[24] =
{ 0,
0, 0, 21, 15, 14, 22, 13, 13, 0, 12,
10, 10, 5, 0, 0, 0, 8, 8, 0, 0,
22, 10, 7
};

static yyconst short int yy_def[24] =
{ 0,
21, 1, 21, 22, 22, 21, 23, 5, 5, 5,
23, 11, 21, 5, 11, 13, 13, 13, 18, 17,
0, 21, 21
};

static yyconst short int yy_nxt[28] =
{ 0,
4, 5, 6, 7, 8, 16, 16, 11, 17, 18,
9, 20, 19, 15, 12, 14, 13, 12, 10, 10,
21, 3, 21, 21, 21, 21, 21
};

static yyconst short int yy_chk[28] =
{ 0,
1, 1, 1, 1, 1, 13, 13, 23, 13, 13,
22, 18, 17, 12, 11, 10, 8, 7, 5, 4,
3, 21, 21, 21, 21, 21, 21
};

static yy_state_type yy_last_accepting_state;
static char 




#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char 
#line 1 "Lab05-06_Tema02_EX01_d.l"
#define INITIAL 0
#line 3 "Lab05-06_Tema02_EX01_d.l"
static FILE 

• Sa se elimine comentariile dintr-un fisier text ce conNine un program în limbajul C.

#line 381 "lex.yy.c"





#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO((int c, char 
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char 
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO((yyconst char 
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO((void));
#else
static int input YY_PROTO((void));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int 
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else




#endif
#endif



#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif




#ifndef ECHO



#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif




#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
if (yy_current_buffer->yy_is_interactive) \
{ \
	int c = '
for (n = 0; n < max_size && \
	(c = getc(yyin)) != EOF && c != '\n'; ++n) \
	buf[n] = (char)c; \
if (c == '\n') \
	buf[n++] = (char)c; \
if (c == EOF && ferror(yyin)) \
	YY_FATAL_ERROR("input in flex scanner failed"); \
	result = n; \
} \
	else if (((result = fread(buf, 1, max_size, yyin)) == 0) \
	&& ferror(yyin)) \
	YY_FATAL_ERROR("input in flex scanner failed");
#endif





#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif



#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif



#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif




#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif




#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
{
	register yy_state_type yy_current_state;
	register char 
	register int yy_act;

#line 10 "Lab05-06_Tema02_EX01_d.l"

#line 534 "lex.yy.c"

	if (yy_init)
	{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if (!yy_start)

 first start state 

		if (!yyin)
			yyin = stdin;

		if (!yyout)
			yyout = stdout;

		if (!yy_current_buffer)
			yy_current_buffer =
			yy_create_buffer(yyin, YY_BUF_SIZE);

		yy_load_buffer_state();
	}


 loops until end-of-file is reached 
	{
		yy_cp = yy_c_buf_p;


 Support of yytext. 
		


 yy_bp points to the position in yy_ch_buf of the start of
		
		
		yy_bp = yy_cp;

		yy_current_state = yy_start;
	yy_match:
		do
		{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(
			if (yy_accept[yy_current_state])
			{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
			}
			while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
			{
				yy_current_state = (int)yy_def[yy_current_state];
				if (yy_current_state >= 22)
					yy_c = yy_meta[(unsigned int)yy_c];
			}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
			++yy_cp;
		} while (yy_base[yy_current_state] != 22);

	yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if (yy_act == 0)

 have to back up 
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
		}

		YY_DO_BEFORE_ACTION;



 This label is used only to access EOF actions. 


		switch (yy_act)

 beginning of action switch 

 must back up 

 undo the effects of YY_DO_BEFORE_ACTION 
			
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

		case 1:
			YY_RULE_SETUP
#line 11 "Lab05-06_Tema02_EX01_d.l"
				fprintf(f, "\n");
			YY_BREAK
		case 2:
			YY_RULE_SETUP
#line 12 "Lab05-06_Tema02_EX01_d.l"
				fprintf(f, "");
			YY_BREAK
		case 3:
			YY_RULE_SETUP
#line 13 "Lab05-06_Tema02_EX01_d.l"
				fprintf(f, "");
			YY_BREAK
		case 4:
			YY_RULE_SETUP
#line 14 "Lab05-06_Tema02_EX01_d.l"
				fprintf(f, "\n");
			YY_BREAK
		case 5:
			YY_RULE_SETUP
#line 15 "Lab05-06_Tema02_EX01_d.l"
				fprintf(f, "%s", yytext);
			YY_BREAK
		case 6:
			YY_RULE_SETUP
#line 16 "Lab05-06_Tema02_EX01_d.l"
				ECHO;
			YY_BREAK
#line 647 "lex.yy.c"
		case YY_STATE_EOF(INITIAL):
			yyterminate();

		case YY_END_OF_BUFFER:
		{

 Amount of text matched not including the EOB char. 
								 int yy_amount_of_matched_text = (int)(yy_cp - yytext_ptr) - 1;


 Undo the effects of YY_DO_BEFORE_ACTION. 
								 
								 YY_RESTORE_YY_MORE_OFFSET

								 if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
								 {

 We're scanning a new file or input source.  It's
									 
									 
									 
									 
									 
									 
									 
									 
									 yy_n_chars = yy_current_buffer->yy_n_chars;
									 yy_current_buffer->yy_input_file = yyin;
									 yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
								 }


 Note that here we test for yy_c_buf_p "<=" to the position
								 
								 
								 
								 
								 
								 
								 if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])

 This was really a NUL. 
									 yy_state_type yy_next_state;

									 yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

									 yy_current_state = yy_get_previous_state();


 Okay, we're now positioned to make the NUL
									 
									 
									 
									 
									 
									 
									 

									 yy_next_state = yy_try_NUL_trans(yy_current_state);

									 yy_bp = yytext_ptr + YY_MORE_ADJ;

									 if (yy_next_state)
									 {

 Consume the NUL. 
										 yy_cp = ++yy_c_buf_p;
										 yy_current_state = yy_next_state;
										 goto yy_match;
									 }

									 else
									 {
										 yy_cp = yy_c_buf_p;
										 goto yy_find_action;
									 }
								 }

								 else switch (yy_get_next_buffer())
								 {
								 case EOB_ACT_END_OF_FILE:
								 {
															 yy_did_buffer_switch_on_eof = 0;

															 if (yywrap())
															 {

 Note: because we've taken care in
																 
																 
																 
																 
																 
																 
																 
																 
																 yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

																 yy_act = YY_STATE_EOF(YY_START);
																 goto do_action;
															 }

															 else
															 {
																 if (!yy_did_buffer_switch_on_eof)
																	 YY_NEW_FILE;
															 }
															 break;
								 }

								 case EOB_ACT_CONTINUE_SCAN:
									 yy_c_buf_p =
										 yytext_ptr + yy_amount_of_matched_text;

									 yy_current_state = yy_get_previous_state();

									 yy_cp = yy_c_buf_p;
									 yy_bp = yytext_ptr + YY_MORE_ADJ;
									 goto yy_match;

								 case EOB_ACT_LAST_MATCH:
									 yy_c_buf_p =
										 &yy_current_buffer->yy_ch_buf[yy_n_chars];

									 yy_current_state = yy_get_previous_state();

									 yy_cp = yy_c_buf_p;
									 yy_bp = yytext_ptr + YY_MORE_ADJ;
									 goto yy_find_action;
								 }
								 break;
		}

		default:
			YY_FATAL_ERROR(
				"fatal flex scanner internal error--no action found");

 end of action switch 

 end of scanning one token 

 end of yylex 










static int yy_get_next_buffer()
{
	register char 
	register char 
	register int number_to_move, i;
	int ret_val;

	if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed");

	if (yy_current_buffer->yy_fill_buffer == 0)

 Don't try to fill the buffer, so this is an EOF. 
		if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
		{

 We matched a single character, the EOB, so
			
			
			return EOB_ACT_END_OF_FILE;
		}

		else
		{

 We matched some text prior to the EOB, first
			
			
			return EOB_ACT_LAST_MATCH;
		}
	}


 Try to read more data. 


 First move last chars to start of buffer. 
	number_to_move = (int)(yy_c_buf_p - yytext_ptr) - 1;

	for (i = 0; i < number_to_move; ++i)
		

	if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)

 don't do the read, it's not guaranteed to return an EOF,
		
		
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
	{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)

 Not enough room in the buffer - grow it. 
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
				"input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else


 just a shorter name for the current buffer 
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int)(yy_c_buf_p - b->yy_ch_buf);

			if (b->yy_is_our_buffer)
			{
				int new_size = b->yy_buf_size 

				if (new_size <= 0)
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size 

				b->yy_ch_buf = (char 

 Include room in for 2 EOB chars. 
					yy_flex_realloc((void 
					b->yy_buf_size + 2);
			}
			else

 Can't grow it, we don't own it. 
				b->yy_ch_buf = 0;

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow");

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
				number_to_move - 1;
#endif
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;


 Read in more data. 
		YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read);

		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	if (yy_n_chars == 0)
	{
		if (number_to_move == YY_MORE_ADJ)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
}





static yy_state_type yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char 

	yy_current_state = yy_start;

	for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
	{
		register YY_CHAR yy_c = (
		if (yy_accept[yy_current_state])
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
		while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
			yy_current_state = (int)yy_def[yy_current_state];
			if (yy_current_state >= 22)
				yy_c = yy_meta[(unsigned int)yy_c];
		}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	}

	return yy_current_state;
}








#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
#else
static yy_state_type yy_try_NUL_trans(yy_current_state)
yy_state_type yy_current_state;
#endif
{
	register int yy_is_jam;
	register char 

	register YY_CHAR yy_c = 1;
	if (yy_accept[yy_current_state])
	{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
	}
	while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
	{
		yy_current_state = (int)yy_def[yy_current_state];
		if (yy_current_state >= 22)
			yy_c = yy_meta[(unsigned int)yy_c];
	}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	yy_is_jam = (yy_current_state == 21);

	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput(int c, register char 
#else
static void yyunput(c, yy_bp)
int c;
register char 
#endif
{
	register char 


 undo effects of setting up yytext 
	

	if (yy_cp < yy_current_buffer->yy_ch_buf + 2)

 need to shift things up to make room 

 +2 for EOB chars. 
		register int number_to_move = yy_n_chars + 2;
		register char 
			yy_current_buffer->yy_buf_size + 2];
			register char 
				&yy_current_buffer->yy_ch_buf[number_to_move];

			while (source > yy_current_buffer->yy_ch_buf)
				

			yy_cp += (int)(dest - source);
			yy_bp += (int)(dest - source);
			yy_current_buffer->yy_n_chars =
				yy_n_chars = yy_current_buffer->yy_buf_size;

			if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
				YY_FATAL_ERROR("flex scanner push-back overflow");
	}

	


	yytext_ptr = yy_bp;
	yy_hold_char = 
	yy_c_buf_p = yy_cp;
}

 ifndef YY_NO_UNPUT 


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
	int c;

	

	if (
	{

 yy_c_buf_p now points to the character we want to return.
		
		
		
		if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])

 This was really a NUL. 
			

		else

 need more input 
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch (yy_get_next_buffer())
			{
			case EOB_ACT_LAST_MATCH:

 This happens because yy_g_n_b()
				
				
				
				
				
				
				
				


 Reset buffer status. 
				yyrestart(yyin);


 fall through 

			case EOB_ACT_END_OF_FILE:
			{
										if (yywrap())
											return EOF;

										if (!yy_did_buffer_switch_on_eof)
											YY_NEW_FILE;
#ifdef __cplusplus
										return yyinput();
#else
										return input();
#endif
			}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p = yytext_ptr + offset;
				break;
			}
		}
	}


 cast for 8-bit char's 

 preserve yytext 
	yy_hold_char = 


	return c;
}


#ifdef YY_USE_PROTOS
void yyrestart(FILE 
#else
void yyrestart(input_file)
FILE 
#endif
{
	if (!yy_current_buffer)
		yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

	yy_init_buffer(yy_current_buffer, input_file);
	yy_load_buffer_state();
}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
#else
void yy_switch_to_buffer(new_buffer)
YY_BUFFER_STATE new_buffer;
#endif
{
	if (yy_current_buffer == new_buffer)
		return;

	if (yy_current_buffer)
	{

 Flush out information for old buffer. 
		
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();


 We don't actually know whether we did this switch during
	
	
	
	
	yy_did_buffer_switch_on_eof = 1;
}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state(void)
#else
void yy_load_buffer_state()
#endif
{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = 
}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer(FILE 
#else
YY_BUFFER_STATE yy_create_buffer(file, size)
FILE 
int size;
#endif
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_buf_size = size;


 yy_ch_buf has to be 2 characters longer than the size given because
	
	
	b->yy_ch_buf = (char 
	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b, file);

	return b;
}


#ifdef YY_USE_PROTOS
void yy_delete_buffer(YY_BUFFER_STATE b)
#else
void yy_delete_buffer(b)
YY_BUFFER_STATE b;
#endif
{
	if (!b)
		return;

	if (b == yy_current_buffer)
		yy_current_buffer = (YY_BUFFER_STATE)0;

	if (b->yy_is_our_buffer)
		yy_flex_free((void 

	yy_flex_free((void 
}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO((int));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer(YY_BUFFER_STATE b, FILE 
#else
void yy_init_buffer(b, file)
YY_BUFFER_STATE b;
FILE 
#endif


{
	yy_flush_buffer(b);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty(_fileno(file)) > 0) : 0;
#endif
#endif
}


#ifdef YY_USE_PROTOS
void yy_flush_buffer(YY_BUFFER_STATE b)
#else
void yy_flush_buffer(b)
YY_BUFFER_STATE b;
#endif

{
	if (!b)
		return;

	b->yy_n_chars = 0;


 We always need two end-of-buffer characters.  The first causes
	
	
	
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if (b == yy_current_buffer)
		yy_load_buffer_state();
}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer(char 
#else
YY_BUFFER_STATE yy_scan_buffer(base, size)
char 
yy_size_t size;
#endif
{
	YY_BUFFER_STATE b;

	if (size < 2 ||
		base[size - 2] != YY_END_OF_BUFFER_CHAR ||
		base[size - 1] != YY_END_OF_BUFFER_CHAR)

 They forgot to leave room for the EOB's. 
		return 0;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");


 "- 2" to take care of EOB's 
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b);

	return b;
}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string(yyconst char 
#else
YY_BUFFER_STATE yy_scan_string(yy_str)
yyconst char 
#endif
{
	int len;
	for (len = 0; yy_str[len]; ++len)
		;

	return yy_scan_bytes(yy_str, len);
}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes(yyconst char 
#else
YY_BUFFER_STATE yy_scan_bytes(bytes, len)
yyconst char 
int len;
#endif
{
	YY_BUFFER_STATE b;
	char 
	yy_size_t n;
	int i;


 Get memory for full buffer, including space for trailing EOB's. 
	n = len + 2;
	buf = (char 
	if (!buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

	for (i = 0; i < len; ++i)
		buf[i] = bytes[i];

	buf[len] = buf[len + 1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf, n);
	if (!b)
		YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");


 It's okay to grow etc. this buffer, and we should throw it
	
	
	b->yy_is_our_buffer = 1;

	return b;
}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state(int new_state)
#else
static void yy_push_state(new_state)
int new_state;
#endif
{
	if (yy_start_stack_ptr >= yy_start_stack_depth)
	{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth 

		if (!yy_start_stack)
			yy_start_stack = (int 

		else
			yy_start_stack = (int 
			(void 

		if (!yy_start_stack)
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack");
	}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
{
	if (--yy_start_stack_ptr < 0)
		YY_FATAL_ERROR("start-condition stack underflow");

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
{
	return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error(yyconst char msg[])
#else
static void yy_fatal_error(msg)
char msg[];
#endif
{
	(void)fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}






#undef yyless
#define yyless(n) \
do \
{ \

 Undo effects of setting up yytext. 
	yytext[yyleng] = yy_hold_char; \
	yy_c_buf_p = yytext + n; \
	yy_hold_char = 
	
	yyleng = n; \
} \
while (0)





#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char 
#else
static void yy_flex_strncpy(s1, s2, n)
char 
yyconst char 
int n;
#endif
{
	register int i;
	for (i = 0; i < n; ++i)
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen(yyconst char 
#else
static int yy_flex_strlen(s)
yyconst char 
#endif
{
	register int n;
	for (n = 0; s[n]; ++n)
		;

	return n;
}
#endif


#ifdef YY_USE_PROTOS
static void 
#else
static void 
yy_size_t size;
#endif
{
	return (void 
}

#ifdef YY_USE_PROTOS
static void 
#else
static void 
void 
yy_size_t size;
#endif
{

 The cast to (char 
	
	
	
	
	
	
	return (void 
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void 
#else
static void yy_flex_free(ptr)
void 
#endif
{
	free(ptr);
}

#if YY_MAIN
int main()
{
	yylex();
	return 0;
}
#endif
#line 16 "Lab05-06_Tema02_EX01_d.l"

int main(){
	printf("Eliminare linii comment: \n\n");
	f = fopen("out.txt", "w");
	yylex();
	fclose(f);
	return 0;
}